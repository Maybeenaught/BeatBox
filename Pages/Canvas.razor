@page "/"

@using Blazor.Extensions;
@using Blazor.Extensions.Canvas.Canvas2D;
@using BeatBox.Data;
@using System.Threading;

@inject AudioService Audio;

@code {
    private BECanvasComponent _canvas;
    private Canvas2DContext _context;
    private int Height { get; set; }
    private int Width { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if(firstRender)
        {
            this._context = await this._canvas.CreateCanvas2DAsync();
            Audio.CaptureWasapi();
        }

        await this._context.SetFillStyleAsync("255, 255, 255, 0.5");
        await this._context.FillRectAsync(0, 0, this._canvas.Width, this._canvas.Height);
        await DrawSpectroLine();

        var timer = new Timer(new TimerCallback(_ =>
        {
            // Note that the following line is necessary because otherwise
            // Blazor would not recognize the state change and not refresh the UI
            InvokeAsync(this.StateHasChanged);
        }), null, 20, 20);
    }

    public async Task DrawSpectroLine()
    {
        double stepIncrement = (double)_canvas.Width / (Audio.spectrograph.Length / 2);
        await this._context.SetStrokeStyleAsync("yellow");
        await this._context.BeginPathAsync();
        await this._context.MoveToAsync(0, 0);
        for (int i = 0; i < Audio.spectrograph.Length/2; i++)
        {
            double amp = this._canvas.Height/2 - ((this._canvas.Height/2) * (double)(Audio.spectrograph[i]/100));
            await this._context.LineToAsync((int)i*stepIncrement, (int)amp);
        }
        await this._context.StrokeAsync();
        await this._context.ClosePathAsync();
    }
}

<BECanvas Width=1850 Height=900 @ref="_canvas"></BECanvas>
